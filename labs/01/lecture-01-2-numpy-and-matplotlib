{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Numpy and matplotlib intro"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import matplotlib as mpl\n",
    "\n",
    "#%matplotlib notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(10), range(10))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "mpl.style.use(\"seaborn\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(10), range(10))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "xs = range(1, 10 + 1)\n",
    "ys = [x**2 for x in xs]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.YTick at 0x1b91ba18eb0>,\n",
       "  <matplotlib.axis.YTick at 0x1b91ba18730>,\n",
       "  <matplotlib.axis.YTick at 0x1b91ba0a790>,\n",
       "  <matplotlib.axis.YTick at 0x1b91ba41ca0>],\n",
       " [Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, '')])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(xs, ys)\n",
    "plt.xticks([5, 10])\n",
    "plt.yticks([25, 50, 75, 100])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Title')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(xs, ys, color=\"orange\")\n",
    "plt.plot(xs, [5 * x for x in xs], color=\"green\")\n",
    "plt.xlabel(\"n\")\n",
    "plt.ylabel(\"n**2\")\n",
    "plt.legend([\"quadratic function\", \"linear function\"])\n",
    "plt.title(\"Title\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([20., 20., 20., 20., 20.]),\n",
       " array([ 0. , 19.8, 39.6, 59.4, 79.2, 99. ]),\n",
       " <BarContainer object of 5 artists>)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(range(100), bins=5, rwidth=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'whiskers': [<matplotlib.lines.Line2D at 0x1b91bb78c70>,\n",
       "  <matplotlib.lines.Line2D at 0x1b91bb78f40>,\n",
       "  <matplotlib.lines.Line2D at 0x1b91bb970d0>,\n",
       "  <matplotlib.lines.Line2D at 0x1b91bb973a0>,\n",
       "  <matplotlib.lines.Line2D at 0x1b91bba44c0>,\n",
       "  <matplotlib.lines.Line2D at 0x1b91bba4790>],\n",
       " 'caps': [<matplotlib.lines.Line2D at 0x1b91bb89310>,\n",
       "  <matplotlib.lines.Line2D at 0x1b91bb89520>,\n",
       "  <matplotlib.lines.Line2D at 0x1b91bb97670>,\n",
       "  <matplotlib.lines.Line2D at 0x1b91bb97940>,\n",
       "  <matplotlib.lines.Line2D at 0x1b91bba4a60>,\n",
       "  <matplotlib.lines.Line2D at 0x1b91bba4d30>],\n",
       " 'boxes': [<matplotlib.lines.Line2D at 0x1b91bb789a0>,\n",
       "  <matplotlib.lines.Line2D at 0x1b91bb89dc0>,\n",
       "  <matplotlib.lines.Line2D at 0x1b91bba41f0>],\n",
       " 'medians': [<matplotlib.lines.Line2D at 0x1b91bb897f0>,\n",
       "  <matplotlib.lines.Line2D at 0x1b91bb97c10>,\n",
       "  <matplotlib.lines.Line2D at 0x1b91bbb2040>],\n",
       " 'fliers': [<matplotlib.lines.Line2D at 0x1b91bb89ac0>,\n",
       "  <matplotlib.lines.Line2D at 0x1b91bb97ee0>,\n",
       "  <matplotlib.lines.Line2D at 0x1b91bbb2310>],\n",
       " 'means': []}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.boxplot([[1, 2, 3, 7], [1, 3, 4, 5], [3, 4, 5, 11]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.array([1,2,3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### But why?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "160 ms ± 21.3 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "\n",
    "my_list = list(range(1000000))\n",
    "\n",
    "my_list = [2 * i for i in my_list]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.48 ms ± 778 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "\n",
    "my_array = np.zeros(1000000)\n",
    "\n",
    "my_array *= 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([      10,      100,     1000,    10000,   100000,  1000000,\n",
       "       10000000], dtype=int32)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sizes = 10 ** np.array(range(1, 7+1))\n",
    "sizes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from timeit import timeit\n",
    "\n",
    "times_list = []\n",
    "times_numpy = []\n",
    "\n",
    "for size in sizes:\n",
    "    _input = list(range(size))\n",
    "\n",
    "    times_list.append(timeit(lambda: [2 * element for element in _input], number=100))\n",
    "\n",
    "for size in sizes:\n",
    "    _input = np.array(range(size))\n",
    "\n",
    "    times_numpy.append(timeit(lambda: 2 * _input, number=100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(sizes, times_list, color=\"cyan\")\n",
    "plt.plot(sizes, times_numpy, color=\"orange\")\n",
    "plt.legend([\"list\", \"numpy\"], prop={\"size\": 16})\n",
    "plt.xlabel(\"number of elements\")\n",
    "plt.ylabel(\"seconds\")\n",
    "plt.xscale(\"log\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[7.80000000020209e-05, 0.0004824000000027695, 0.006708800000001958, 0.07269220000000232, 0.766621200000003, 11.491327299999998, 154.7813622]\n",
      "[0.00011349999999765714, 8.739999998397252e-05, 0.00018500000001608896, 0.000795700000026045, 0.009634099999999535, 0.3439319000000012, 3.100820199999987]\n",
      "[0.6872246696355151, 5.519450801959181, 36.2637837806406, 91.3562900560801, 79.57372250651748, 33.41163555924867, 49.91626479987477]\n"
     ]
    }
   ],
   "source": [
    "print(times_list)\n",
    "print(times_numpy)\n",
    "print([l/n for l, n in zip(times_list, times_numpy)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The basics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a:\t [1 2 3]\n",
      "shape:\t (3,)\n",
      "dim:\t 1\n",
      "dtype:\t int32\n"
     ]
    }
   ],
   "source": [
    "a = np.array([1, 2, 3])\n",
    "\n",
    "print(\"a:\\t\", a)\n",
    "print(\"shape:\\t\", a.shape)\n",
    "print(\"dim:\\t\", a.ndim)\n",
    "print(\"dtype:\\t\", a.dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "b = np.array([1, 2, 3], dtype=np.int8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b:\t [1 2 3]\n",
      "shape:\t (3,)\n",
      "dim:\t 1\n",
      "dtype:\t int8\n"
     ]
    }
   ],
   "source": [
    "print(\"b:\\t\", b)\n",
    "print(\"shape:\\t\", b.shape)\n",
    "print(\"dim:\\t\", b.ndim)\n",
    "print(\"dtype:\\t\", b.dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "size of a (in bytes):  12\n",
      "size of b (in bytes):  3\n"
     ]
    }
   ],
   "source": [
    "print(\"size of a (in bytes): \", a.nbytes)\n",
    "print(\"size of b (in bytes): \", b.nbytes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "c:\t [0.5  0.75 1.  ]\n",
      "dtype:\t float64\n"
     ]
    }
   ],
   "source": [
    "c = np.array([0.5, 0.75, 1.0])\n",
    "\n",
    "print(\"c:\\t\", c)\n",
    "print(\"dtype:\\t\", c.dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n"
     ]
    }
   ],
   "source": [
    "a = np.ones(10)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0. 0. 0.]\n"
     ]
    }
   ],
   "source": [
    "a = np.zeros(3)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4 5 6 7 8 9]\n"
     ]
    }
   ],
   "source": [
    "d = np.arange(10)\n",
    "print(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 1 2 3 4]\n",
      " [5 6 7 8 9]]\n"
     ]
    }
   ],
   "source": [
    "d2 = np.arange(10).reshape(2, 5)\n",
    "print(d2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4]\n"
     ]
    }
   ],
   "source": [
    "print(d2[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "print(d2[0][2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9. 10.]\n"
     ]
    }
   ],
   "source": [
    "e = np.linspace(0, 10, 11)\n",
    "print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1.   1.1  1.2  1.3\n",
      "  1.4  1.5  1.6  1.7  1.8  1.9  2.   2.1  2.2  2.3  2.4  2.5  2.6  2.7\n",
      "  2.8  2.9  3.   3.1  3.2  3.3  3.4  3.5  3.6  3.7  3.8  3.9  4.   4.1\n",
      "  4.2  4.3  4.4  4.5  4.6  4.7  4.8  4.9  5.   5.1  5.2  5.3  5.4  5.5\n",
      "  5.6  5.7  5.8  5.9  6.   6.1  6.2  6.3  6.4  6.5  6.6  6.7  6.8  6.9\n",
      "  7.   7.1  7.2  7.3  7.4  7.5  7.6  7.7  7.8  7.9  8.   8.1  8.2  8.3\n",
      "  8.4  8.5  8.6  8.7  8.8  8.9  9.   9.1  9.2  9.3  9.4  9.5  9.6  9.7\n",
      "  9.8  9.9 10. ]\n"
     ]
    }
   ],
   "source": [
    "f = np.linspace(0, 10, 101)\n",
    "print(f)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Basic operations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-2  0  2]\n",
      "[4 4 4]\n",
      "[2 4 6]\n",
      "[1 4 9]\n",
      "[ True False False]\n",
      "[0.84147098 0.90929743 0.14112001]\n",
      "[1.         1.41421356 1.73205081]\n",
      "[0.        1.        1.5849625]\n"
     ]
    }
   ],
   "source": [
    "a = np.array([1, 2, 3])\n",
    "b = np.array([3, 2, 1])\n",
    "\n",
    "print(a - b)\n",
    "print(a + b)\n",
    "print(2 * a)\n",
    "print(a ** 2)\n",
    "print(a < 2)\n",
    "print(np.sin(a))\n",
    "print(np.sqrt(a))\n",
    "print(np.log2(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4 4 4]\n",
      "[1 2 3]\n"
     ]
    }
   ],
   "source": [
    "a += b\n",
    "print(a)\n",
    "\n",
    "a -= b\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10  2  3]\n",
      "[10  2  3]\n"
     ]
    }
   ],
   "source": [
    "a = np.array([1, 2, 3])\n",
    "b = a\n",
    "\n",
    "b[0] = 10\n",
    "\n",
    "print(a)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2 3]\n",
      "[10  2  3]\n"
     ]
    }
   ],
   "source": [
    "a = np.array([1, 2, 3])\n",
    "b = a.copy()\n",
    "\n",
    "b[0] = 10\n",
    "\n",
    "print(a)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Matrix operations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A: (2, 3)\n",
      "B: (3, 4)\n",
      "2A:\n",
      " [[ 2  4  6]\n",
      " [ 8 10 12]]\n",
      "C:\n",
      " [[ 9 11 13 15]\n",
      " [24 29 34 39]]\n",
      "C shape: (2, 4)\n",
      "D:\n",
      " [[ 9 11 13 15]\n",
      " [24 29 34 39]]\n",
      "D shape: (2, 4)\n"
     ]
    }
   ],
   "source": [
    "A = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "B = np.array([[1, 2, 3, 4], [4, 3, 2, 1], [0, 1, 2, 3]])\n",
    "\n",
    "C = np.matmul(A, B)\n",
    "D = A @ B\n",
    "\n",
    "print(\"A:\", A.shape)\n",
    "print(\"B:\", B.shape)\n",
    "print(\"2A:\\n\", 2 * A)\n",
    "print(\"C:\\n\", C)\n",
    "print(\"C shape:\", C.shape)\n",
    "print(\"D:\\n\", D)\n",
    "print(\"D shape:\", D.shape)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.12 ('base')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "orig_nbformat": 2,
  "vscode": {
   "interpreter": {
    "hash": "25a87336bbb3c9a66b469a40ccde4c42aa781e98e8d6be98142d8f7f9e469d8d"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
